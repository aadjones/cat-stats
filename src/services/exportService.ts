import type {
  CharacterSheet,
  CharacterAbility,
} from '../core/personality/types';
import { isRpgCharacterData } from '../core/personality/types';

// Lazy load heavy PDF library only when needed
const loadJsPDF = async () => {
  const { jsPDF } = await import('jspdf');
  return jsPDF;
};

export function generateTextExport(characterSheet: CharacterSheet): void {
  const { characterData, stats, petName } = characterSheet;

  // Type guard: Text export only supports RPG data
  if (!isRpgCharacterData(characterData)) {
    alert('Text export is currently only available for RPG character sheets.');
    return;
  }

  const textContent = `
╔═══════════════════════════════════════════════════════════════╗
║                           CATSTATS                            ║
║                    FELINE LEGEND CHARACTER SHEET             ║
╠═══════════════════════════════════════════════════════════════╣

🐱 NAME: ${petName.toUpperCase()}
🏆 ARCHETYPE: ${characterData.archetype}

╔═══════════════════════════════════════════════════════════════╗
║                        CORE ATTRIBUTES                       ║
╠═══════════════════════════════════════════════════════════════╣
║ Wisdom...................................... ${stats.wisdom.toString().padStart(3)} ║
║ Cunning..................................... ${stats.cunning.toString().padStart(3)} ║
║ Agility..................................... ${stats.agility.toString().padStart(3)} ║
║ Stealth..................................... ${stats.stealth.toString().padStart(3)} ║
║ Charisma.................................... ${stats.charisma.toString().padStart(3)} ║
║ Resolve..................................... ${stats.resolve.toString().padStart(3)} ║
╚═══════════════════════════════════════════════════════════════╝

⚔️  COMBAT MOVES:
${characterData.combatMoves
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

🌍 ENVIRONMENTAL POWERS:
${characterData.environmentalPowers
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

💬 SOCIAL SKILLS:
${characterData.socialSkills
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

🔮 PASSIVE TRAITS:
${characterData.passiveTraits
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

⚠️  CRITICAL VULNERABILITY:
• ${characterData.weakness.name}
  ${characterData.weakness.description}

🕒 SITUATIONAL MODIFIERS:
${characterData.timeModifiers
  .map((modifier) => `• ${modifier.name}: ${modifier.effect}\n`)
  .join('')}

╔═══════════════════════════════════════════════════════════════╗
║                    Generated by CatStats                     ║
║                  Turn your pet into a legend!                ║
╚═══════════════════════════════════════════════════════════════╝
`;

  // Create and download as a text file
  const blob = new Blob([textContent], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${petName}-CatStats-Legend.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);

  alert(
    `✨ ${petName}'s character sheet downloaded! Perfect for printing or sharing.`
  );
}

// Helper function to convert image to base64
const getImageAsBase64 = (url: string): Promise<string> => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = img.width;
      canvas.height = img.height;
      ctx?.drawImage(img, 0, 0);
      resolve(canvas.toDataURL('image/jpeg', 0.8));
    };
    img.onerror = () => reject(new Error('Failed to load image'));
    img.src = url;
  });
};

export async function generatePdfExport(
  characterSheet: CharacterSheet,
  characterId?: string | null
): Promise<void> {
  const { characterData, stats, petName, petPhoto } = characterSheet;

  // Type guard: PDF export only supports RPG data
  if (!isRpgCharacterData(characterData)) {
    alert('PDF export is currently only available for RPG character sheets.');
    return;
  }

  const jsPDFClass = await loadJsPDF();
  const pdf = new jsPDFClass();
  let yPosition = 20;
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;

  // Title
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(51, 51, 51); // Dark gray instead of pure black
  pdf.text('CATSTATS CHARACTER SHEET', pageWidth / 2, yPosition, {
    align: 'center',
  });
  yPosition += 20;

  // Add pet photo if available
  if (petPhoto) {
    try {
      const imageBase64 = await getImageAsBase64(petPhoto);
      const imageSize = 35;
      const imageX = pageWidth - margin - imageSize;
      const imageY = yPosition - 5;

      // Add a subtle border around the photo
      pdf.setDrawColor(200, 200, 200); // Light gray border
      pdf.setLineWidth(1);
      pdf.rect(imageX - 2, imageY - 2, imageSize + 4, imageSize + 4);

      pdf.addImage(imageBase64, 'JPEG', imageX, imageY, imageSize, imageSize);
    } catch (error) {
      console.warn('Failed to add pet photo to PDF:', error);
    }
  }

  // Pet name and archetype
  pdf.setTextColor(0, 0, 0); // Reset to black for main content
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text(`NAME: ${petName.toUpperCase()}`, margin, yPosition);
  yPosition += 10;

  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'normal');
  pdf.setTextColor(68, 68, 68); // Slightly lighter for archetype
  pdf.text(`ARCHETYPE: ${characterData.archetype}`, margin, yPosition);
  yPosition += 20;

  // Core Attributes section
  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(63, 81, 181); // Blue accent color
  pdf.text('CORE ATTRIBUTES', margin, yPosition);

  // Add underline for section
  pdf.setDrawColor(63, 81, 181);
  pdf.setLineWidth(0.5);
  pdf.line(margin, yPosition + 2, margin + 60, yPosition + 2);

  yPosition += 15;

  pdf.setFont('helvetica', 'normal');
  pdf.setFontSize(11);
  pdf.setTextColor(0, 0, 0); // Reset to black
  const attributes = [
    ['Wisdom', stats.wisdom],
    ['Cunning', stats.cunning],
    ['Agility', stats.agility],
    ['Stealth', stats.stealth],
    ['Charisma', stats.charisma],
    ['Resolve', stats.resolve],
  ];

  attributes.forEach(([name, value]) => {
    pdf.setFont('helvetica', 'bold');
    pdf.text(`${name}:`, margin + 5, yPosition);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`${value}`, margin + 70, yPosition);
    yPosition += 8; // Better line spacing
  });

  yPosition += 15;

  // Helper function to add abilities section with improved styling
  const addAbilitiesSection = (
    title: string,
    abilities: CharacterAbility[],
    color: [number, number, number] = [63, 81, 181]
  ) => {
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(...color);
    pdf.text(title, margin, yPosition);

    // Add underline for section
    pdf.setDrawColor(...color);
    pdf.setLineWidth(0.5);
    const titleWidth = pdf.getTextWidth(title);
    pdf.line(margin, yPosition + 2, margin + titleWidth, yPosition + 2);

    yPosition += 12;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    pdf.setTextColor(0, 0, 0); // Reset to black

    abilities.forEach((ability) => {
      // Check if we need a new page
      if (yPosition > 245) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(11);
      pdf.text(`• ${ability.name}`, margin + 5, yPosition);
      yPosition += 8;

      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(9);
      if (ability.stats) {
        pdf.setTextColor(102, 102, 102); // Gray for stats
        pdf.text(`  ${ability.stats}`, margin + 10, yPosition);
        yPosition += 8;
      }

      // Wrap long descriptions
      pdf.setTextColor(0, 0, 0); // Black for description
      const description = ability.description;
      const splitDescription = pdf.splitTextToSize(
        description,
        pageWidth - margin * 2 - 10
      );
      splitDescription.forEach((line: string) => {
        if (yPosition > 245) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(`  ${line}`, margin + 10, yPosition);
        yPosition += 7;
      });
      yPosition += 5; // Extra space between abilities
    });

    yPosition += 8;
  };

  // Add all ability sections with different colors
  addAbilitiesSection('COMBAT MOVES', characterData.combatMoves, [220, 53, 69]); // Red
  addAbilitiesSection(
    'ENVIRONMENTAL POWERS',
    characterData.environmentalPowers,
    [25, 135, 84]
  ); // Green
  addAbilitiesSection(
    'SOCIAL SKILLS',
    characterData.socialSkills,
    [255, 193, 7]
  ); // Amber/Gold
  addAbilitiesSection(
    'PASSIVE TRAITS',
    characterData.passiveTraits,
    [156, 39, 176]
  ); // Purple

  // Critical Vulnerability
  if (yPosition > 235) {
    pdf.addPage();
    yPosition = 20;
  }

  pdf.setFontSize(14);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(220, 38, 38); // Red color for vulnerability
  pdf.text('CRITICAL VULNERABILITY', margin, yPosition);

  // Add underline
  pdf.setDrawColor(220, 38, 38);
  pdf.setLineWidth(0.5);
  const vulnTitleWidth = pdf.getTextWidth('CRITICAL VULNERABILITY');
  pdf.line(margin, yPosition + 2, margin + vulnTitleWidth, yPosition + 2);

  yPosition += 12;

  pdf.setFont('helvetica', 'bold');
  pdf.setFontSize(11);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`• ${characterData.weakness.name}`, margin + 5, yPosition);
  yPosition += 8;

  pdf.setFont('helvetica', 'normal');
  pdf.setFontSize(9);
  const weaknessDesc = pdf.splitTextToSize(
    characterData.weakness.description,
    pageWidth - margin * 2 - 10
  );
  weaknessDesc.forEach((line: string) => {
    pdf.text(`  ${line}`, margin + 10, yPosition);
    yPosition += 7;
  });

  yPosition += 15;

  // Time Modifiers
  if (characterData.timeModifiers && characterData.timeModifiers.length > 0) {
    if (yPosition > 235) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(139, 69, 19); // Brown color for situational modifiers
    pdf.text('SITUATIONAL MODIFIERS', margin, yPosition);

    // Add underline
    pdf.setDrawColor(139, 69, 19);
    pdf.setLineWidth(0.5);
    const modTitleWidth = pdf.getTextWidth('SITUATIONAL MODIFIERS');
    pdf.line(margin, yPosition + 2, margin + modTitleWidth, yPosition + 2);

    yPosition += 12;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    pdf.setTextColor(0, 0, 0);

    characterData.timeModifiers.forEach((modifier) => {
      pdf.setFont('helvetica', 'bold');
      pdf.text(`• ${modifier.name}:`, margin + 5, yPosition);
      yPosition += 8;
      pdf.setFont('helvetica', 'normal');
      pdf.text(`  ${modifier.effect}`, margin + 10, yPosition);
      yPosition += 8;
    });
  }

  // Footer
  const finalPage = pdf.internal.pages.length - 1;
  pdf.setPage(finalPage + 1);
  const footerY = pdf.internal.pageSize.getHeight() - 30;

  // Add character link if available
  if (characterId) {
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'normal');
    const shareUrl = `https://cat-stats-six.vercel.app/legend/${characterId}`;
    const labelText = 'View online: ';

    // Calculate positions for centered text
    const totalWidth = pdf.getTextWidth(labelText + shareUrl);
    const startX = (pageWidth - totalWidth) / 2;

    // Draw label in gray
    pdf.setTextColor(102, 102, 102);
    pdf.text(labelText, startX, footerY);

    // Draw URL in blue
    pdf.setTextColor(63, 81, 181);
    pdf.text(shareUrl, startX + pdf.getTextWidth(labelText), footerY);
  }

  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'italic');
  pdf.setTextColor(102, 102, 102); // Gray for attribution
  pdf.text(
    'Generated by CatStats - Turn your pet into a legend!',
    pageWidth / 2,
    footerY + (characterId ? 12 : 10),
    { align: 'center' }
  );

  // Download the PDF
  pdf.save(`${petName}-CatStats-Legend.pdf`);
}
