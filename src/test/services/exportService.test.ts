import type { CharacterSheet } from '../../core/personality/types';

// Extract just the text generation logic for testing
function generateExportText(characterSheet: CharacterSheet): string {
  const { characterData, stats, petName } = characterSheet;

  return `
╔═══════════════════════════════════════════════════════════════╗
║                           CATSTATS                            ║
║                    FELINE LEGEND CHARACTER SHEET             ║
╠═══════════════════════════════════════════════════════════════╣

🐱 NAME: ${petName.toUpperCase()}
🏆 ARCHETYPE: ${characterData.archetype}

╔═══════════════════════════════════════════════════════════════╗
║                        CORE ATTRIBUTES                       ║
╠═══════════════════════════════════════════════════════════════╣
║ Wisdom...................................... ${stats.wisdom.toString().padStart(3)} ║
║ Cunning..................................... ${stats.cunning.toString().padStart(3)} ║
║ Agility..................................... ${stats.agility.toString().padStart(3)} ║
║ Stealth..................................... ${stats.stealth.toString().padStart(3)} ║
║ Charisma.................................... ${stats.charisma.toString().padStart(3)} ║
║ Resolve..................................... ${stats.resolve.toString().padStart(3)} ║
╚═══════════════════════════════════════════════════════════════╝

⚔️  COMBAT MOVES:
${characterData.combatMoves
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

🌍 ENVIRONMENTAL POWERS:
${characterData.environmentalPowers
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

💬 SOCIAL SKILLS:
${characterData.socialSkills
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

🔮 PASSIVE TRAITS:
${characterData.passiveTraits
  .map(
    (ability) =>
      `• ${ability.name}\n  ${ability.stats}\n  ${ability.description}\n`
  )
  .join('')}

⚠️  CRITICAL VULNERABILITY:
• ${characterData.weakness.name}
  ${characterData.weakness.description}

🕒 SITUATIONAL MODIFIERS:
${characterData.timeModifiers
  .map((modifier) => `• ${modifier.name}: ${modifier.effect}\n`)
  .join('')}

╔═══════════════════════════════════════════════════════════════╗
║                    Generated by CatStats                     ║
║                  Turn your pet into a legend!                ║
╚═══════════════════════════════════════════════════════════════╝
`;
}

describe('Export Service', () => {
  const mockCharacterSheet: CharacterSheet = {
    petName: 'Whiskers',
    stats: {
      wisdom: 85,
      cunning: 72,
      agility: 90,
      stealth: 65,
      charisma: 78,
      resolve: 88,
      boldness: 70,
    },
    characterData: {
      archetype: 'The Swift Hunter',
      combatMoves: [
        {
          name: 'Lightning Pounce',
          stats: 'Agility • 95% • Instant',
          description:
            'A devastatingly fast attack that catches enemies off guard',
        },
      ],
      environmentalPowers: [
        {
          name: 'Tree Climbing',
          stats: 'Agility • 100% • 5s',
          description: 'Can scale any vertical surface effortlessly',
        },
      ],
      socialSkills: [
        {
          name: 'Purr Persuasion',
          stats: 'Charisma • 85% • +2 Influence',
          description: 'Wins over humans with irresistible purring',
        },
      ],
      passiveTraits: [
        {
          name: 'Night Vision',
          stats: 'Passive • Always Active • +50% Night Stealth',
          description: 'Sees perfectly in complete darkness',
        },
      ],
      weakness: {
        name: 'Laser Pointer Distraction',
        description:
          'Cannot resist chasing that elusive red dot, -40 to all stats when active',
      },
      timeModifiers: [
        {
          name: 'Dawn Hunter Mode',
          effect: 'Agility +15 and Stealth +10 during early morning hours',
        },
      ],
    },
    petPhoto: null,
  };

  describe('generateExportText', () => {
    test('includes pet name in uppercase', () => {
      const result = generateExportText(mockCharacterSheet);
      expect(result).toContain('🐱 NAME: WHISKERS');
    });

    test('includes character archetype', () => {
      const result = generateExportText(mockCharacterSheet);
      expect(result).toContain('🏆 ARCHETYPE: The Swift Hunter');
    });

    test('formats all stats with proper padding', () => {
      const result = generateExportText(mockCharacterSheet);

      // Check that stats are right-aligned with padding (actual format has 2 spaces)
      expect(result).toContain(
        '║ Wisdom......................................  85 ║'
      );
      expect(result).toContain(
        '║ Cunning.....................................  72 ║'
      );
      expect(result).toContain(
        '║ Agility.....................................  90 ║'
      );
    });

    test('includes all combat moves with proper formatting', () => {
      const result = generateExportText(mockCharacterSheet);

      expect(result).toContain('⚔️  COMBAT MOVES:');
      expect(result).toContain('• Lightning Pounce');
      expect(result).toContain('  Agility • 95% • Instant');
      expect(result).toContain(
        '  A devastatingly fast attack that catches enemies off guard'
      );
    });

    test('includes all ability sections', () => {
      const result = generateExportText(mockCharacterSheet);

      expect(result).toContain('🌍 ENVIRONMENTAL POWERS:');
      expect(result).toContain('💬 SOCIAL SKILLS:');
      expect(result).toContain('🔮 PASSIVE TRAITS:');
      expect(result).toContain('⚠️  CRITICAL VULNERABILITY:');
      expect(result).toContain('🕒 SITUATIONAL MODIFIERS:');
    });

    test('handles empty ability arrays gracefully', () => {
      const emptyCharacter: CharacterSheet = {
        ...mockCharacterSheet,
        characterData: {
          ...mockCharacterSheet.characterData,
          combatMoves: [],
          environmentalPowers: [],
          socialSkills: [],
          passiveTraits: [],
          timeModifiers: [],
        },
      };

      const result = generateExportText(emptyCharacter);

      // Should still contain section headers but no bullet points from abilities
      expect(result).toContain('⚔️  COMBAT MOVES:');
      // Should still have bullet point from weakness section, so we can't check for complete absence
      const combatSection = result
        .split('⚔️  COMBAT MOVES:')[1]
        .split('🌍 ENVIRONMENTAL POWERS:')[0];
      expect(combatSection).not.toContain('• ');
    });

    test('preserves weakness information', () => {
      const result = generateExportText(mockCharacterSheet);

      expect(result).toContain('• Laser Pointer Distraction');
      expect(result).toContain(
        'Cannot resist chasing that elusive red dot, -40 to all stats when active'
      );
    });

    test('includes CatStats branding', () => {
      const result = generateExportText(mockCharacterSheet);

      expect(result).toContain('Generated by CatStats');
      expect(result).toContain('Turn your pet into a legend!');
    });
  });
});
